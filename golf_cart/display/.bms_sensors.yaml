# current:
# id: bms_${bms_number}_current
# filters:
#   - delta: 0.05
# on_value:
#   then:
#     - lvgl.label.update:
#         id: bms_${bms_number}_current_label
#         text:
#           format: "%.2fA"
#           args:
#             - "x"
#     - if:
#         condition:
#           lambda: |-
#             return x > 0;
#         then:
#           - sensor.template.publish:
#               id: bms_${bms_number}_max_charge_current
#               state: !lambda |-
#                 static float max_charge = 0.0;
#                 if (x > max_charge) {
#                   max_charge = x;
#                 }
#                 return max_charge;
#         else:
#           - sensor.template.publish:
#               id: bms_${bms_number}_max_discharge_current
#               state: !lambda |-
#                 static float max_discharge = 0.0;
#                 if (x < max_discharge) {
#                   max_discharge = x;
#                 }
#                 return max_discharge;

power:
  name: "${friendly_name} BMS ${bms_number} power"
  internal: true
charging_power:
  name: "${friendly_name} BMS ${bms_number} charging power"
  internal: true
discharging_power:
  name: "${friendly_name} BMS ${bms_number} discharging power"
  internal: true

# state_of_charge:
#   id: bms_${bms_number}_state_of_charge
#   name: "${friendly_name} BMS ${bms_number} state of charge"
#   filters:
#     - delta: 1
#   on_value:
#     then:
#       - lvgl.label.update:
#           id: bms_${bms_number}_soc_label
#           text:
#             format: "%.2f%%"
#             args:
#               - "id(bms_${bms_number}_state_of_charge).state"
# capacity_remaining:
#   id: bms_${bms_number}_capacity_remaining
#   filters:
#     - delta: 0.005
#   on_value:
#     then:
#       - lvgl.label.update:
#           id: bms_${bms_number}_remaining_capacity_label
#           text:
#             format: "%.2fAh"
#             args:
#               - "x"

nominal_capacity:
  name: "${friendly_name} BMS ${bms_number} nominal capacity"
  internal: true
charging_cycles:
  name: "${friendly_name} BMS ${bms_number} charging cycles"
  disabled_by_default: true

battery_cycle_capacity:
  name: "${friendly_name} BMS ${bms_number} battery cycle capacity"
  internal: true
# total_voltage:
#   name: "${friendly_name} BMS ${bms_number} total voltage"
#   internal: true
#   filters:
#     - delta: 0.005
#   on_value:
#     then:
#       - lvgl.label.update:
#           id: bms_${bms_number}_voltage_label
#           text:
#             format: "%.3fv"
#             args:
#               - "x"
#       - sensor.template.publish:
#           id: bms_${bms_number}_max_voltage
#           state: !lambda |-
#             static float max_voltage = 0.0;
#             if (x > max_voltage) {
#               max_voltage = x;
#             }
#             return max_voltage;
#       - sensor.template.publish:
#           id: bms_${bms_number}_min_voltage
#           state: !lambda |-
#             static float min_voltage = 0.0;
#             if (x < min_voltage || min_voltage == 0.0) {
#               min_voltage = x;
#             }
#             return min_voltage;
average_cell_voltage:
  id: bms_${bms_number}_average_cell_voltage
# delta_cell_voltage:
#   id: bms_${bms_number}_delta_cell_voltage
#   on_value:
#     then:
#       - lvgl.label.update:
#           id: bms_${bms_number}_cell_delta_label
#           text:
#             format: "%.3fv"
#             args:
#               - "x"
#       - sensor.template.publish:
#           id: bms_${bms_number}_max_cell_delta
#           state: !lambda |-
#             static float max_delta = 0.0;
#             if (x > max_delta) {
#               max_delta = x;
#             }
#             return max_delta;

min_cell_voltage:
  id: bms_${bms_number}_min_cell_voltage
max_cell_voltage:
  id: bms_${bms_number}_max_cell_voltage
min_voltage_cell:
  id: bms_${bms_number}_min_voltage_cell
max_voltage_cell:
  id: bms_${bms_number}_max_voltage_cell
temperature_1:
  id: bms_${bms_number}_temperature_1
temperature_2:
  id: bms_${bms_number}_temperature_2
temperature_3:
  id: bms_${bms_number}_temperature_3
# cell_voltage_1: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     bms_number: ${bms_number}
#     cell_number: 1
# cell_voltage_2: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     cell_number: 2
# cell_voltage_3: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     cell_number: 3
# cell_voltage_4: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     cell_number: 4
# cell_voltage_5: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     cell_number: 5
# cell_voltage_6: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     cell_number: 6
# cell_voltage_7: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     cell_number: 7
# cell_voltage_8: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     cell_number: 8
# cell_voltage_9: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     cell_number: 9
# cell_voltage_10: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     cell_number: 10
# cell_voltage_11: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     cell_number: 11
# cell_voltage_12: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     cell_number: 12
# cell_voltage_13: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     cell_number: 13
# cell_voltage_14: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     cell_number: 14
# cell_voltage_15: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     cell_number: 15
# cell_voltage_16: !include
#   file: .cell_voltage_sensor.yaml
#   vars:
#     cell_number: 16
