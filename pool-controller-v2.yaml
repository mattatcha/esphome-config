substitutions:
  device_name: pool-controller-v2
  friendly_name: Pool Controller V2

packages:
  common: !include .common.yaml

esp32:
  board: esp32dev
  framework:
    type: esp-idf

api:
  actions:
    - action: get_orp_calibration
      then:
        - lambda: |-
            id(orp_ezo).get_calibration();
    - action: set_orp_calibration
      # variables:
      # solution_mv: int
      then:
        - lambda: |-
            id(orp_ezo).set_calibration_generic(222);
    - action: calibrate_chlorine_pump
      variables:
        rotations: float
      then:
        - logger.log:
            format: "Starting chlorine pump calibration with %d rotations"
            args: ["rotations"]
        - stepper.set_target:
            id: chlorinator
            target: !lambda "return id(chlorinator).current_position + (rotations * 200);"
        - while:
            condition:
              lambda: |-
                return id(chlorinator).current_position != id(chlorinator).target_position;
            then:
              - delay: 100ms
        - logger.log: "Chlorine pump calibration complete"
    - action: calibrate_acid_pump
      variables:
        rotations: float
      then:
        - logger.log:
            format: "Starting acid pump calibration with %d rotations"
            args: ["rotations"]
        - stepper.set_target:
            id: muratic_acid
            target: !lambda "return id(muratic_acid).current_position + (rotations * 200);"
        - while:
            condition:
              lambda: |-
                return id(muratic_acid).current_position != id(muratic_acid).target_position;
            then:
              - delay: 100ms
        - logger.log: "Acid pump calibration complete"
    - action: dose_chlorine
      variables:
        dose_ml: float
      then:
        - script.execute:
            id: dose_chemical
            pump_id: "chlorinator"
            dose_ml: !lambda "return dose_ml;"
            steps_per_ml: !lambda "return id(chlorine_pump_calibration);"
    - action: dose_acid
      variables:
        dose_ml: float
      then:
        - script.execute:
            id: dose_chemical
            pump_id: "muratic_acid"
            dose_ml: !lambda "return dose_ml;"
            steps_per_ml: !lambda "return id(acid_pump_calibration);"

mapping:
  - id: pump_stepper_map
    from: string
    to: stepper::Stepper
    entries:
      chlorinator: chlorinator
      muratic_acid: muratic_acid
  - id: pump_chemical_map
    from: string
    to: string
    entries:
      chlorinator: chlorine
      muratic_acid: acid

script:
  - id: dose_chemical
    parameters:
      pump_id: string
      dose_ml: float
      steps_per_ml: float
    then:
      - if:
          condition:
            lambda: "return !id(pump).state;"
          then:
            - logger.log: "Cannot dose - pool pump must be running"
          else:
            - lambda: |-
                auto chemical = id(pump_chemical_map)[pump_id];
                ESP_LOGI("dose_chemical", "Dosing %.1f mL of %s (steps per mL: %.1f)", dose_ml, chemical.c_str(), steps_per_ml);
            - lambda: |-
                auto stepper_component = id(pump_stepper_map)[pump_id];
                if (stepper_component) {
                  stepper_component->set_target(stepper_component->current_position + (dose_ml * steps_per_ml));
                  while (stepper_component->current_position != stepper_component->target_position) {
                    delay(5000);
                  }
                  auto chemical = id(pump_chemical_map)[pump_id];
                  ESP_LOGI("dose_chemical", "%s dosing complete", chemical.c_str());
                } else {
                  ESP_LOGE("dose_chemical", "Invalid pump ID: %s", pump_id.c_str());
                }

esphome:
  on_boot:
    - tmc2209.configure:
        id: chlorinator
        microsteps: 1
        interpolation: false
        direction: ccw
    - tmc2209.currents:
        id: chlorinator
        standstill_mode: freewheeling
        irun: 16
    - tmc2209.configure:
        id: muratic_acid
        microsteps: 1
        interpolation: false
        direction: ccw
    - tmc2209.currents:
        id: muratic_acid
        standstill_mode: freewheeling
        irun: 16

uart:
  tx_pin: 17
  rx_pin: 16
  baud_rate: 500000

i2c:
  sda: 21
  scl: 22
  scan: false
  id: bus_a

wifi:
  power_save_mode: none
  reboot_timeout: 1h

web_server:
  port: 80

logger:
  level: DEBUG

external_components:
  - source: github://slimcdk/esphome-custom-components
    components: [tmc2209_hub, tmc2209, stepper]

.chlorinator_pins: &ChlorinatorPins
  index_pin: 27
  enn_pin: 14
  diag_pin: 26

.muratic_pins: &MuraticPins
  index_pin: 33
  enn_pin: 13
  diag_pin: 32

globals:
  - id: pump_start_time
    type: unsigned long
    restore_value: no
    initial_value: "0"
  - id: chlorine_pump_calibration
    type: unsigned long
    restore_value: no
    initial_value: "220"
  - id: acid_pump_calibration
    type: unsigned long
    restore_value: no
    initial_value: "565"

tmc2209_hub:

stepper:
  - platform: tmc2209
    id: chlorinator
    max_speed: 586 steps/s
    rsense: 110 mOhm
    address: 0x00
    config_dump_include_registers: true
    on_status:
      - logger.log:
          format: "Chlorine driver is reporting an update! (code %d)"
          args: ["code"]
    <<: *ChlorinatorPins
  - platform: tmc2209
    id: muratic_acid
    max_speed: 586 steps/s
    rsense: 110 mOhm
    config_dump_include_registers: true
    address: 0x01
    on_status:
      - logger.log:
          format: "Acid driver is reporting an update! (code %d)"
          args: ["code"]
    <<: *MuraticPins

number:
  - platform: template
    name: "Chlorine Dose Amount (mL)"
    id: chlorine_dose_amount
    optimistic: true
    min_value: 1
    max_value: 2000
    step: 1
  - platform: template
    name: "Acid Dose Amount (mL)"
    id: acid_dose_amount
    optimistic: true
    min_value: 1
    max_value: 2000
    step: 1

# Button to run the calibration test
button:
  - platform: template
    name: "Run Custom Chlorine Dose"
    on_press:
      then:
        - if:
            condition:
              lambda: "return id(pump).state;"
            then:
              - logger.log: "Dosing Chlorine..."
              # - stepper.report_position:
              #     id: chlorinator
              #     position: 0
              - stepper.set_target:
                  id: chlorinator
                  target: !lambda "return id(chlorinator).current_position + (int(id(chlorine_dose_amount).state) * id(chlorine_pump_calibration));"
              - while:
                  condition:
                    lambda: |-
                      return id(chlorinator).current_position != id(chlorinator).target_position;
                  then:
                    - delay: 5s
              - logger.log: "Chlorine dosing done!"
            else:
              - logger.log: "Cannot dose chlorine - pool pump must be running"
  - platform: template
    name: "Run Custom Acid Dose"
    on_press:
      then:
        - if:
            condition:
              lambda: "return id(pump).state;"
            then:
              - logger.log: "Dosing Acid..."
              # - stepper.report_position:
              #     id: muratic_acid
              #     position: 0
              - stepper.set_target:
                  id: muratic_acid
                  target: !lambda "return id(muratic_acid).current_position + (int(id(acid_dose_amount).state) * id(acid_pump_calibration));"
              - while:
                  condition:
                    lambda: |-
                      return id(muratic_acid).current_position != id(muratic_acid).target_position;
                  then:
                    - logger.log:
                        format: "muratic acid position! (code %d)"
                        args: ["id(muratic_acid).current_position"]
                    - delay: 5s
              - logger.log: "Acid dosing done!"
            else:
              - logger.log: "Cannot dose acid - pool pump must be running"

sensor:
  - platform: adc
    id: raw_ntc
    pin: 34
  - platform: resistance
    id: ntc_resistance
    sensor: raw_ntc
    configuration: DOWNSTREAM
    resistor: 10kOhm
    name: NTC Resistance
  - platform: ntc
    sensor: ntc_resistance
    calibration:
      - 1667.7Ohm -> 29.4°C
      - 2119.6Ohm -> 20°C
      - 2626.9Ohm -> 10°C
    name: Pool Water Temperature
    icon: mdi:coolant-temperature

    # update_interval: never

  - platform: ezo
    id: orp_ezo
    name: "ORP"
    icon: mdi:react
    address: 98
    unit_of_measurement: "mV"
    accuracy_decimals: 1
    update_interval: 30s
    state_class: "measurement"
    device_class: voltage
    on_calibration:
      then:
        - logger.log:
            format: "ORP sensor calibration updated: (code %s)"
            args: ["x.c_str()"]

  - platform: copy
    source_id: orp_ezo
    id: orp_avg
    icon: mdi:react
    name: "ORP Average"
    state_class: "measurement"
    device_class: voltage
    unit_of_measurement: mV
    accuracy_decimals: 1
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 1
          send_first_at: 1

  - platform: adc
    name: "pH Voltage"
    id: raw_ph
    # attenuation: auto
    attenuation: 12dB
    pin: 35
    update_interval: 60s

  - platform: copy
    source_id: raw_ph
    name: "pH"
    # update_interval: 5s
    device_class: pH
    unit_of_measurement: pH
    filters:
      - median:
          window_size: 15
          send_every: 8
      # Only report pH values when pump is off to avoid unstable readings
      - lambda: |-
          if (id(pump).state) {
            return {};  // Don't report when pump is running
          }
          return x;
      # Measured voltage -> Actual pH (buffer solution)
      - calibrate_polynomial:
          degree: 2
          datapoints:
            - 1.26 -> 4.0
            - 1.412 -> 7.0
            - 1.56 -> 10.01

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s

  - platform: uptime
    type: seconds
    name: Uptime Sensor

  - platform: template
    name: "Total Chlorine Dosed"
    id: total_chlorine_dosed
    unit_of_measurement: "mL"
    device_class: volume
    state_class: total_increasing
    accuracy_decimals: 2
    lambda: |-
      return id(chlorinator).current_position / id(chlorine_pump_calibration);
    update_interval: 5s

  - platform: template
    name: "Total Acid Dosed"
    id: total_acid_dosed
    unit_of_measurement: "mL"
    device_class: volume
    state_class: total_increasing
    accuracy_decimals: 2
    lambda: |-
      return id(muratic_acid).current_position / id(acid_pump_calibration);
    update_interval: 5s

switch:
  - platform: gpio
    id: pump
    name: Pool Pump
    pin:
      number: 4
      inverted: False
    icon: mdi:water-pump
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - globals.set:
          id: pump_start_time
          value: !lambda "return millis();"
    on_turn_off:
      - switch.turn_off: booster_pump
      - globals.set:
          id: pump_start_time
          value: "0"
      - stepper.stop: chlorinator
      - stepper.stop: muratic_acid
  - platform: gpio
    id: booster_pump
    name: Pool Cleaner
    pin:
      number: 18
      inverted: False
    icon: mdi:water-pump
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - if:
          condition:
            lambda: |-
              return id(pump).state && (millis() - id(pump_start_time) >= 300000);
          then:
            - logger.log: "Booster pump allowed to start - pool pump has been running for 5+ minutes"
          else:
            - logger.log: "Booster pump blocked - pool pump must run for 5 minutes first"
            - switch.turn_off: booster_pump
